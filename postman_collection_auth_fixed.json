{
    "info": {
        "name": "Investudy",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "description": "Generated from Investudy OpenAPI spec"
    },
    "item": [
        {
            "name": "Account",
            "item": [
                {
                    "name": "POST /api/Account",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Account",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Account"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"type\": \"example_type\",\n  \"membersIds\": \"example_membersIds\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Account",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Account",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Account"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/Account/invite",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Account/invite",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Account",
                                "invite"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"accountId\": \"example_accountId\",\n  \"membersIds\": \"example_membersIds\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Account/invites",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Account/invites",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Account",
                                "invites"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Account/invites/account",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Account/invites/account",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Account",
                                "invites",
                                "account"
                            ],
                            "query": [
                                {
                                    "key": "AccountId",
                                    "value": "{{AccountId}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PUT /api/Account/invites/reaction",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Account/invites/reaction",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Account",
                                "invites",
                                "reaction"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"inviteId\": \"example_inviteId\",\n  \"action\": \"example_action\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "ApplicationSubscriptions",
            "item": [
                {
                    "name": "POST /api/ApplicationSubscriptions",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/ApplicationSubscriptions",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "ApplicationSubscriptions"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"identifier\": \"example_identifier\",\n  \"subscriptionType\": \"example_subscriptionType\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Authors",
            "item": [
                {
                    "name": "POST /api/Authors",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Authors",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Authors"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"firstName\": \"example_firstName\",\n  \"lastName\": \"example_lastName\",\n  \"authorImage\": \"example_authorImage\",\n  \"subscriptionPrice\": \"example_subscriptionPrice\",\n  \"bio\": \"example_bio\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PUT /api/Authors",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Authors",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Authors"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"authorId\": \"example_authorId\",\n  \"firstName\": \"example_firstName\",\n  \"lastName\": \"example_lastName\",\n  \"bio\": \"example_bio\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Authors",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Authors",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Authors"
                            ],
                            "query": [
                                {
                                    "key": "authorId",
                                    "value": "{{authorId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "DELETE /api/Authors",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Authors",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Authors"
                            ],
                            "query": [
                                {
                                    "key": "authorId",
                                    "value": "{{authorId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PATCH /api/Authors/first-name",
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Authors/first-name",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Authors",
                                "first-name"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"authorId\": \"example_authorId\",\n  \"firstName\": \"example_firstName\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PATCH /api/Authors/last-name",
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Authors/last-name",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Authors",
                                "last-name"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"authorId\": \"example_authorId\",\n  \"lastName\": \"example_lastName\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PATCH /api/Authors/image",
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Authors/image",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Authors",
                                "image"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"authorId\": \"example_authorId\",\n  \"image\": \"example_image\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Authors/all",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Authors/all",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Authors",
                                "all"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                },
                                {
                                    "key": "keyword",
                                    "value": "{{keyword}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Authors/subscriptions",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Authors/subscriptions",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Authors",
                                "subscriptions"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Auths",
            "item": [
                {
                    "name": "POST /api/Auths/login",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/Auths/login",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Auths",
                                "login"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"identifier\": \"example_identifier\",\n  \"password\": \"example_password\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "",
                                    "pm.sendRequest({",
                                    "    url: pm.variables.get(\"base_url\") + \"/api/Auths/login\",",
                                    "    method: \"POST\",",
                                    "    header: {\"Content-Type\": \"application/json\"},",
                                    "    body: {",
                                    "        mode: \"raw\",",
                                    "        raw: JSON.stringify({",
                                    "            \"identifier\": pm.variables.get(\"username\"),",
                                    "            \"password\": pm.variables.get(\"password\")",
                                    "        })",
                                    "    }",
                                    "}, function (err, res) {",
                                    "    if (!err && res.json().data) {",
                                    "        pm.globals.set(\"auth_token\", res.json().data.accessToken);",
                                    "        pm.globals.set(\"refresh_token\", res.json().data.refreshToken);",
                                    "    }",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "if (pm.response.code === 200 && pm.response.json().data) {",
                                    "    pm.globals.set(\"auth_token\", pm.response.json().data.accessToken);",
                                    "    pm.globals.set(\"refresh_token\", pm.response.json().data.refreshToken);",
                                    "}",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/Auths/refresh-token",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Auths/refresh-token",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Auths",
                                "refresh-token"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Auths/google/auth-uri",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Auths/google/auth-uri",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Auths",
                                "google",
                                "auth-uri"
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Auths/google/auth-code",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Auths/google/auth-code",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Auths",
                                "google",
                                "auth-code"
                            ],
                            "query": [
                                {
                                    "key": "code",
                                    "value": "{{code}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Auths/apple/auth-uri",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Auths/apple/auth-uri",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Auths",
                                "apple",
                                "auth-uri"
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/Auths/apple/auth-code",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Auths/apple/auth-code",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Auths",
                                "apple",
                                "auth-code"
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Balance",
            "item": [
                {
                    "name": "POST /api/Balance",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Balance",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Balance"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"accountId\": \"example_accountId\",\n  \"name\": \"example_name\",\n  \"imagePath\": \"example_imagePath\",\n  \"amount\": \"example_amount\",\n  \"balanceCreatedDate\": \"example_balanceCreatedDate\",\n  \"type\": \"example_type\",\n  \"interestCapitalizationPeriod\": \"example_interestCapitalizationPeriod\",\n  \"interestRate\": \"example_interestRate\",\n  \"currencyId\": \"example_currencyId\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Balance",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Balance",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Balance"
                            ],
                            "query": [
                                {
                                    "key": "BalanceType",
                                    "value": "{{BalanceType}}",
                                    "description": ""
                                },
                                {
                                    "key": "Keyword",
                                    "value": "{{Keyword}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "DELETE /api/Balance/{balanceId}",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Balance/{balanceId}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Balance",
                                "{balanceId}"
                            ],
                            "query": [
                                {
                                    "key": "balanceId",
                                    "value": "{{balanceId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Comments",
            "item": [
                {
                    "name": "POST /api/Comments",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Comments",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Comments"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"postId\": \"example_postId\",\n  \"content\": \"example_content\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PUT /api/Comments",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Comments",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Comments"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"commentId\": \"example_commentId\",\n  \"content\": \"example_content\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Comments",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Comments",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Comments"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                },
                                {
                                    "key": "PostId",
                                    "value": "{{PostId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "DELETE /api/Comments",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Comments",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Comments"
                            ],
                            "query": [
                                {
                                    "key": "commentId",
                                    "value": "{{commentId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Credit",
            "item": [
                {
                    "name": "POST /api/Credit",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Credit",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Credit"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"accountId\": \"example_accountId\",\n  \"currencyId\": \"example_currencyId\",\n  \"name\": \"example_name\",\n  \"amount\": \"example_amount\",\n  \"initialPaymentDate\": \"example_initialPaymentDate\",\n  \"paymentWay\": \"example_paymentWay\",\n  \"creditType\": \"example_creditType\",\n  \"term\": \"example_term\",\n  \"interestRate\": \"example_interestRate\",\n  \"initialFee\": \"example_initialFee\",\n  \"initialFeeRate\": \"example_initialFeeRate\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PUT /api/Credit",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Credit",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Credit"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"id\": \"example_id\",\n  \"name\": \"example_name\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Credit/{creditId}",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Credit/{creditId}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Credit",
                                "{creditId}"
                            ],
                            "query": [
                                {
                                    "key": "creditId",
                                    "value": "{{creditId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "DELETE /api/Credit/{creditId}",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Credit/{creditId}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Credit",
                                "{creditId}"
                            ],
                            "query": [
                                {
                                    "key": "creditId",
                                    "value": "{{creditId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Credit/all",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Credit/all",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Credit",
                                "all"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "CryptoCoinQuotations",
            "item": [
                {
                    "name": "GET /api/CryptoCoinQuotations",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/CryptoCoinQuotations",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "CryptoCoinQuotations"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                },
                                {
                                    "key": "KeywordType",
                                    "value": "{{KeywordType}}",
                                    "description": ""
                                },
                                {
                                    "key": "Keyword",
                                    "value": "{{Keyword}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/CryptoCoinQuotations/{id}",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/CryptoCoinQuotations/{{last_created_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "CryptoCoinQuotations",
                                "{{last_created_id}}"
                            ],
                            "query": [
                                {
                                    "key": "id",
                                    "value": "{{id}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "CryptoCoins",
            "item": [
                {
                    "name": "GET /api/CryptoCoins",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/CryptoCoins",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "CryptoCoins"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                },
                                {
                                    "key": "KeywordType",
                                    "value": "{{KeywordType}}",
                                    "description": ""
                                },
                                {
                                    "key": "Keyword",
                                    "value": "{{Keyword}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/CryptoCoins/{id}",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/CryptoCoins/{{last_created_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "CryptoCoins",
                                "{{last_created_id}}"
                            ],
                            "query": [
                                {
                                    "key": "id",
                                    "value": "{{id}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "CurrencyQuotes",
            "item": [
                {
                    "name": "GET /api/CurrencyQuotes",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/CurrencyQuotes",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "CurrencyQuotes"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                },
                                {
                                    "key": "Keyword",
                                    "value": "{{Keyword}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Debt",
            "item": [
                {
                    "name": "POST /api/Debt",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Debt",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Debt"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"balanceId\": \"example_balanceId\",\n  \"currencyId\": \"example_currencyId\",\n  \"name\": \"example_name\",\n  \"amount\": \"example_amount\",\n  \"debtType\": \"example_debtType\",\n  \"debtDate\": \"example_debtDate\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PUT /api/Debt",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Debt",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Debt"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"id\": \"example_id\",\n  \"name\": \"example_name\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Debt/{debtId}",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Debt/{debtId}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Debt",
                                "{debtId}"
                            ],
                            "query": [
                                {
                                    "key": "debtId",
                                    "value": "{{debtId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "DELETE /api/Debt/{debtId}",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Debt/{debtId}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Debt",
                                "{debtId}"
                            ],
                            "query": [
                                {
                                    "key": "debtId",
                                    "value": "{{debtId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Debt/all",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Debt/all",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Debt",
                                "all"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Files",
            "item": [
                {
                    "name": "GET /api/Files",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Files",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Files"
                            ],
                            "query": [
                                {
                                    "key": "FilePath",
                                    "value": "{{FilePath}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Hashtag",
            "item": [
                {
                    "name": "POST /api/Hashtag",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Hashtag",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Hashtag"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"example_name\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PUT /api/Hashtag",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Hashtag",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Hashtag"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"id\": \"example_id\",\n  \"name\": \"example_name\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Hashtag/{hashtagId}",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Hashtag/{hashtagId}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Hashtag",
                                "{hashtagId}"
                            ],
                            "query": [
                                {
                                    "key": "hashtagId",
                                    "value": "{{hashtagId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "DELETE /api/Hashtag/{hashtagId}",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Hashtag/{hashtagId}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Hashtag",
                                "{hashtagId}"
                            ],
                            "query": [
                                {
                                    "key": "hashtagId",
                                    "value": "{{hashtagId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Hashtag/all",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Hashtag/all",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Hashtag",
                                "all"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                },
                                {
                                    "key": "Keyword",
                                    "value": "{{Keyword}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Identifier",
            "item": [
                {
                    "name": "POST /api/Identifier/otp/initial",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Identifier/otp/initial",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Identifier",
                                "otp",
                                "initial"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"mainIdentifierType\": \"example_mainIdentifierType\",\n  \"changingIdentifierType\": \"example_changingIdentifierType\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/Identifier/otp/new",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Identifier/otp/new",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Identifier",
                                "otp",
                                "new"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"changingIdentifierType\": \"example_changingIdentifierType\",\n  \"identifier\": \"example_identifier\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/Identifier/otp/verification",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Identifier/otp/verification",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Identifier",
                                "otp",
                                "verification"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"otpCode\": \"example_otpCode\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Investment",
            "item": [
                {
                    "name": "POST /api/Investment",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Investment",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Investment"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"accountId\": \"example_accountId\",\n  \"tickerId\": \"example_tickerId\",\n  \"cryptoCoinId\": \"example_cryptoCoinId\",\n  \"currencyId\": \"example_currencyId\",\n  \"balanceId\": \"example_balanceId\",\n  \"amount\": \"example_amount\",\n  \"purchasedPrice\": \"example_purchasedPrice\",\n  \"purchaseDate\": \"example_purchaseDate\",\n  \"comment\": \"example_comment\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Investment",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Investment",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Investment"
                            ],
                            "query": [
                                {
                                    "key": "Type",
                                    "value": "{{Type}}",
                                    "description": ""
                                },
                                {
                                    "key": "StartDate",
                                    "value": "{{StartDate}}",
                                    "description": ""
                                },
                                {
                                    "key": "EndDate",
                                    "value": "{{EndDate}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Investment/grouped/{investmentType}",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Investment/grouped/{investmentType}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Investment",
                                "grouped",
                                "{investmentType}"
                            ],
                            "query": [
                                {
                                    "key": "investmentType",
                                    "value": "{{investmentType}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "DELETE /api/Investment/{investmentId}",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Investment/{investmentId}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Investment",
                                "{investmentId}"
                            ],
                            "query": [
                                {
                                    "key": "investmentId",
                                    "value": "{{investmentId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "KaseNews",
            "item": [
                {
                    "name": "GET /api/KaseNews",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/KaseNews",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "KaseNews"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                },
                                {
                                    "key": "Keyword",
                                    "value": "{{Keyword}}",
                                    "description": ""
                                },
                                {
                                    "key": "LanguageId",
                                    "value": "{{LanguageId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Orders",
            "item": [
                {
                    "name": "POST /api/Orders",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Orders",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Orders"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"postId\": \"example_postId\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Orders",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Orders",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Orders"
                            ],
                            "query": [
                                {
                                    "key": "orderId",
                                    "value": "{{orderId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/Orders/cryptogram",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Orders/cryptogram",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Orders",
                                "cryptogram"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"postId\": \"example_postId\",\n  \"cryptogram\": \"example_cryptogram\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Orders/user/all",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Orders/user/all",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Orders",
                                "user",
                                "all"
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Payments",
            "item": [
                {
                    "name": "POST /api/Payments/donate",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Payments/donate",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Payments",
                                "donate"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"amount\": \"example_amount\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/Payments/donate/cryptogram",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Payments/donate/cryptogram",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Payments",
                                "donate",
                                "cryptogram"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"amount\": \"example_amount\",\n  \"cardCryptogramPacket\": \"example_cardCryptogramPacket\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/Payments/post3ds",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Payments/post3ds",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Payments",
                                "post3ds"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"transactionId\": \"example_transactionId\",\n  \"paRes\": \"example_paRes\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/Payments/notifications/pay",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Payments/notifications/pay",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Payments",
                                "notifications",
                                "pay"
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Posters",
            "item": [
                {
                    "name": "POST /api/Posters",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Posters",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Posters"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"title\": \"example_title\",\n  \"imageBody\": \"example_imageBody\",\n  \"startDate\": \"example_startDate\",\n  \"endDate\": \"example_endDate\",\n  \"deepLink\": \"example_deepLink\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PUT /api/Posters",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Posters",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Posters"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"id\": \"example_id\",\n  \"title\": \"example_title\",\n  \"imageBody\": \"example_imageBody\",\n  \"startDate\": \"example_startDate\",\n  \"endDate\": \"example_endDate\",\n  \"deepLink\": \"example_deepLink\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "DELETE /api/Posters/{posterId}",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Posters/{posterId}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Posters",
                                "{posterId}"
                            ],
                            "query": [
                                {
                                    "key": "posterId",
                                    "value": "{{posterId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Posters/{posterId}",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Posters/{posterId}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Posters",
                                "{posterId}"
                            ],
                            "query": [
                                {
                                    "key": "posterId",
                                    "value": "{{posterId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Posters/all",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Posters/all",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Posters",
                                "all"
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PUT /api/Posters/actual",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Posters/actual",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Posters",
                                "actual"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"postersIds\": \"example_postersIds\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Posters/actual",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Posters/actual",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Posters",
                                "actual"
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Posts",
            "item": [
                {
                    "name": "POST /api/Posts",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Posts",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Posts"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"title\": \"example_title\",\n  \"content\": \"example_content\",\n  \"postType\": \"example_postType\",\n  \"authorId\": \"example_authorId\",\n  \"amount\": \"example_amount\",\n  \"isPaid\": \"example_isPaid\",\n  \"isInSubscription\": \"example_isInSubscription\",\n  \"tagsIds\": \"example_tagsIds\",\n  \"postImage\": \"example_postImage\",\n  \"sourceUrl\": \"example_sourceUrl\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PUT /api/Posts",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Posts",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Posts"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"postId\": \"example_postId\",\n  \"title\": \"example_title\",\n  \"content\": \"example_content\",\n  \"sourceUrl\": \"example_sourceUrl\",\n  \"amount\": \"example_amount\",\n  \"tagsIds\": \"example_tagsIds\",\n  \"isPostPaid\": \"example_isPostPaid\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Posts",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Posts",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Posts"
                            ],
                            "query": [
                                {
                                    "key": "postId",
                                    "value": "{{postId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "DELETE /api/Posts",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Posts",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Posts"
                            ],
                            "query": [
                                {
                                    "key": "postId",
                                    "value": "{{postId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PATCH /api/Posts/content",
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Posts/content",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Posts",
                                "content"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"postId\": \"example_postId\",\n  \"content\": \"example_content\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PATCH /api/Posts/title",
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Posts/title",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Posts",
                                "title"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"postId\": \"example_postId\",\n  \"title\": \"example_title\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Posts/all",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Posts/all",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Posts",
                                "all"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                },
                                {
                                    "key": "Keyword",
                                    "value": "{{Keyword}}",
                                    "description": ""
                                },
                                {
                                    "key": "PostType",
                                    "value": "{{PostType}}",
                                    "description": ""
                                },
                                {
                                    "key": "AuthorId",
                                    "value": "{{AuthorId}}",
                                    "description": ""
                                },
                                {
                                    "key": "SortingParam",
                                    "value": "{{SortingParam}}",
                                    "description": ""
                                },
                                {
                                    "key": "SortingType",
                                    "value": "{{SortingType}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Posts/all/liked",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Posts/all/liked",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Posts",
                                "all",
                                "liked"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                },
                                {
                                    "key": "Keyword",
                                    "value": "{{Keyword}}",
                                    "description": ""
                                },
                                {
                                    "key": "PostType",
                                    "value": "{{PostType}}",
                                    "description": ""
                                },
                                {
                                    "key": "AuthorId",
                                    "value": "{{AuthorId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Posts/all/saved",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Posts/all/saved",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Posts",
                                "all",
                                "saved"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                },
                                {
                                    "key": "Keyword",
                                    "value": "{{Keyword}}",
                                    "description": ""
                                },
                                {
                                    "key": "PostType",
                                    "value": "{{PostType}}",
                                    "description": ""
                                },
                                {
                                    "key": "AuthorId",
                                    "value": "{{AuthorId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PATCH /api/Posts/image",
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Posts/image",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Posts",
                                "image"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"postId\": \"example_postId\",\n  \"postImage\": \"example_postImage\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/Posts/like",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Posts/like",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Posts",
                                "like"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"postId\": \"example_postId\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/Posts/save",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Posts/save",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Posts",
                                "save"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"postId\": \"example_postId\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Posts/purchased",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Posts/purchased",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Posts",
                                "purchased"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Prices",
            "item": [
                {
                    "name": "PUT /api/Prices",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Prices",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Prices"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"example_name\",\n  \"amount\": \"example_amount\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Prices",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Prices",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Prices"
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Quotation",
            "item": [
                {
                    "name": "GET /api/Quotation",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Quotation",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Quotation"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                },
                                {
                                    "key": "keyword",
                                    "value": "{{keyword}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Subscription",
            "item": [
                {
                    "name": "POST /api/Subscription",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Subscription",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Subscription"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"authorId\": \"example_authorId\",\n  \"subscriptionType\": \"example_subscriptionType\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Subscription",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Subscription",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Subscription"
                            ],
                            "query": [
                                {
                                    "key": "subscriptionId",
                                    "value": "{{subscriptionId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/Subscription/cryptogram",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Subscription/cryptogram",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Subscription",
                                "cryptogram"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"authorId\": \"example_authorId\",\n  \"subscriptionType\": \"example_subscriptionType\",\n  \"cryptogram\": \"example_cryptogram\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Subscription/User/all",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Subscription/User/all",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Subscription",
                                "User",
                                "all"
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/Subscription/cancel",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Subscription/cancel",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Subscription",
                                "cancel"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"authorId\": \"example_authorId\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Ticker",
            "item": [
                {
                    "name": "PUT /api/Ticker/icon",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Ticker/icon",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Ticker",
                                "icon"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"id\": \"example_id\",\n  \"icon\": \"example_icon\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PUT /api/Ticker",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Ticker",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Ticker"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"id\": \"example_id\",\n  \"name\": \"example_name\",\n  \"currencyId\": \"example_currencyId\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Ticker/all",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Ticker/all",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Ticker",
                                "all"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                },
                                {
                                    "key": "keyword",
                                    "value": "{{keyword}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Transaction",
            "item": [
                {
                    "name": "POST /api/Transaction",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Transaction",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Transaction"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"balanceId\": \"example_balanceId\",\n  \"creditId\": \"example_creditId\",\n  \"debtId\": \"example_debtId\",\n  \"destinationBalanceId\": \"example_destinationBalanceId\",\n  \"transactionCategoryId\": \"example_transactionCategoryId\",\n  \"transactionType\": \"example_transactionType\",\n  \"amount\": \"example_amount\",\n  \"transactionDate\": \"example_transactionDate\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Transaction",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Transaction",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Transaction"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                },
                                {
                                    "key": "StartDate",
                                    "value": "{{StartDate}}",
                                    "description": ""
                                },
                                {
                                    "key": "EndDate",
                                    "value": "{{EndDate}}",
                                    "description": ""
                                },
                                {
                                    "key": "TransactionType",
                                    "value": "{{TransactionType}}",
                                    "description": ""
                                },
                                {
                                    "key": "TransactionCategoryId",
                                    "value": "{{TransactionCategoryId}}",
                                    "description": ""
                                },
                                {
                                    "key": "BalanceId",
                                    "value": "{{BalanceId}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "TransactionCategory",
            "item": [
                {
                    "name": "POST /api/TransactionCategory",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/TransactionCategory",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "TransactionCategory"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"parentId\": \"example_parentId\",\n  \"name\": \"example_name\",\n  \"imagePath\": \"example_imagePath\",\n  \"transactionCategoryType\": \"example_transactionCategoryType\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PUT /api/TransactionCategory",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/TransactionCategory",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "TransactionCategory"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"id\": \"example_id\",\n  \"parentId\": \"example_parentId\",\n  \"name\": \"example_name\",\n  \"imagePath\": \"example_imagePath\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/TransactionCategory",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/TransactionCategory",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "TransactionCategory"
                            ],
                            "query": [
                                {
                                    "key": "TransactionCategoryType",
                                    "value": "{{TransactionCategoryType}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/TransactionCategory/user",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/TransactionCategory/user",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "TransactionCategory",
                                "user"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/TransactionCategory/add",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/TransactionCategory/add",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "TransactionCategory",
                                "add"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"transactionId\": \"example_transactionId\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/TransactionCategory/transactions",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/TransactionCategory/transactions",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "TransactionCategory",
                                "transactions"
                            ],
                            "query": [
                                {
                                    "key": "GroupedTransactionType",
                                    "value": "{{GroupedTransactionType}}",
                                    "description": ""
                                },
                                {
                                    "key": "StartDate",
                                    "value": "{{StartDate}}",
                                    "description": ""
                                },
                                {
                                    "key": "EndDate",
                                    "value": "{{EndDate}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "UserDatas",
            "item": [
                {
                    "name": "POST /api/UserDatas",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/UserDatas",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "UserDatas"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"dataTypeName\": \"example_dataTypeName\",\n  \"dataBody\": \"example_dataBody\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PATCH /api/UserDatas",
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/UserDatas",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "UserDatas"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"dataTypeName\": \"example_dataTypeName\",\n  \"dataBody\": \"example_dataBody\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "DELETE /api/UserDatas",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/UserDatas",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "UserDatas"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"$ref\": \"#/components/schemas/DeleteUserDataDto\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/UserDatas",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/UserDatas",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "UserDatas"
                            ],
                            "query": [
                                {
                                    "key": "DataTypeName",
                                    "value": "{{DataTypeName}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/UserDatas/all",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/UserDatas/all",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "UserDatas",
                                "all"
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/UserDatas/all",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/UserDatas/all",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "UserDatas",
                                "all"
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/UserDatas/transport",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/UserDatas/transport",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "UserDatas",
                                "transport"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"userId\": \"example_userId\",\n  \"userDataTypeName\": \"example_userDataTypeName\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "UserDataType",
            "item": [
                {
                    "name": "POST /api/UserDataType",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/UserDataType",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "UserDataType"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"userDataType\": \"example_userDataType\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/UserDataType",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/UserDataType",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "UserDataType"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "DELETE /api/UserDataType",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/UserDataType",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "UserDataType"
                            ],
                            "query": [
                                {
                                    "key": "UserDataType",
                                    "value": "{{UserDataType}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Users",
            "item": [
                {
                    "name": "GET /api/Users/me",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Users/me",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Users",
                                "me"
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PUT /api/Users/me",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Users/me",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Users",
                                "me"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"firstName\": \"example_firstName\",\n  \"lastName\": \"example_lastName\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "DELETE /api/Users/me",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Users/me",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Users",
                                "me"
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Users/me/confirmation-code",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Users/me/confirmation-code",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Users",
                                "me",
                                "confirmation-code"
                            ],
                            "query": [
                                {
                                    "key": "Identifier",
                                    "value": "{{Identifier}}",
                                    "description": ""
                                },
                                {
                                    "key": "ConfirmationCodeType",
                                    "value": "{{ConfirmationCodeType}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/Users/me/confirmation-code/check",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Users/me/confirmation-code/check",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Users",
                                "me",
                                "confirmation-code",
                                "check"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"identifier\": \"example_identifier\",\n  \"confirmationCodeType\": \"example_confirmationCodeType\",\n  \"confirmationCode\": \"example_confirmationCode\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/Users/identity",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Users/identity",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Users",
                                "identity"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"identifier\": \"example_identifier\",\n  \"confirmationCodeType\": \"example_confirmationCodeType\",\n  \"confirmationCode\": \"example_confirmationCode\",\n  \"password\": \"example_password\",\n  \"firstName\": \"example_firstName\",\n  \"lastName\": \"example_lastName\",\n  \"dateOfBirth\": \"example_dateOfBirth\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PATCH /api/Users/me/avatar",
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Users/me/avatar",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Users",
                                "me",
                                "avatar"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"avatar\": \"example_avatar\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "PATCH /api/Users/me/birth-day",
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Users/me/birth-day",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Users",
                                "me",
                                "birth-day"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"dateOfBirth\": \"example_dateOfBirth\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/Users/password/change",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Users/password/change",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Users",
                                "password",
                                "change"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"identifier\": \"example_identifier\",\n  \"confirmationCode\": \"example_confirmationCode\",\n  \"newPassword\": \"example_newPassword\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/Users/premium",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Users/premium",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Users",
                                "premium"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"subscriptionType\": \"example_subscriptionType\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Users/premium",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Users/premium",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Users",
                                "premium"
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/Users/premium/cryptogram",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Users/premium/cryptogram",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Users",
                                "premium",
                                "cryptogram"
                            ]
                        },
                        "description": "",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"subscriptionType\": \"example_subscriptionType\",\n  \"cryptogram\": \"example_cryptogram\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "POST /api/Users/premium/cancel",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Users/premium/cancel",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Users",
                                "premium",
                                "cancel"
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "GET /api/Users/all",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/Users/all",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "Users",
                                "all"
                            ],
                            "query": [
                                {
                                    "key": "PageNumber",
                                    "value": "{{PageNumber}}",
                                    "description": ""
                                },
                                {
                                    "key": "PageSize",
                                    "value": "{{PageSize}}",
                                    "description": ""
                                },
                                {
                                    "key": "KeyWord",
                                    "value": "{{KeyWord}}",
                                    "description": ""
                                },
                                {
                                    "key": "Type",
                                    "value": "{{Type}}",
                                    "description": ""
                                }
                            ]
                        },
                        "description": ""
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "pm.test('Статус 200 OK', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "pm.test('Ответ содержит данные', function () {",
                                    "    pm.expect(pm.response.json().data).to.be.an('object');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "// Получаем статус-код ответа\nvar statusCode = pm.response.code;\n\n// Разрешенные коды\nvar allowedCodes = [200, 201];\n\nif (!allowedCodes.includes(statusCode)) {\n    console.log(\"❌ Ошибка: \" + pm.request.method + \" \" + pm.request.url + \" → \" + statusCode);\n\n    // Логируем ошибку в Allure\n    pm.test(\"❌ Ошибка запроса\", function() {\n        pm.expect(statusCode).to.be.oneOf(allowedCodes);\n    });\n}",
                                    "",
                                    "        if (pm.response.code === 200 && pm.response.json().data) {",
                                    "            var responseData = pm.response.json().data;",
                                    "            if (responseData.id) {",
                                    "                pm.globals.set(\"last_created_id\", responseData.id);",
                                    "            }",
                                    "        }",
                                    "        "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        }
        
    ]
}
